// WordPress webpack config.
const defaultConfig = require('@wordpress/scripts/config/webpack.config');

// Plugins.
const RemoveEmptyScriptsPlugin = require('webpack-remove-empty-scripts');
const TerserPlugin = require('terser-webpack-plugin');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');

// Utilities.
const path = require('path');
const glob = require('glob');

// Helpers to compute entries.
const computeJsEntries = () => {
    const jsAbsPattern = path.join(process.cwd(), 'src', 'js', '**', '*.js').split(path.sep).join(path.posix.sep);
    const jsFiles = glob.sync(jsAbsPattern);
    return jsFiles.reduce((acc, filePath) => {
        const rel = path.relative(path.join(process.cwd(), 'src', 'js'), filePath).split(path.sep).join('/');
        const key = `js/${rel.replace(/\.js$/, '')}`;
        acc[key] = filePath;
        return acc;
    }, {});
};

const computeScssEntries = () => {
    const scssAbsPattern = path.join(process.cwd(), 'src', 'scss', '**', '*.scss').split(path.sep).join(path.posix.sep);
    const scssFiles = glob.sync(scssAbsPattern);
    return scssFiles.reduce((acc, filePath) => {
        const rel = path.relative(path.join(process.cwd(), 'src', 'scss'), filePath).split(path.sep).join('/');
        const key = `css/${rel.replace(/\.scss$/, '')}`;
        acc[key] = filePath;
        return acc;
    }, {});
};

// Main function to compute all entries dynamically.
const computeAllEntries = () => {
    console.log('Re-computing Webpack entries...');
    return {
        ...computeJsEntries(),
        ...computeScssEntries(),
    };
};

module.exports = {
    ...defaultConfig,
    ...{
        entry: computeAllEntries,
        plugins: [
			// Include WP's plugin config.
            ...defaultConfig.plugins,

			// Removes the empty `.js` files generated by webpack but
			// sets it after WP has generated its `*.asset.php` file.
            new RemoveEmptyScriptsPlugin({
                stage: RemoveEmptyScriptsPlugin.STAGE_AFTER_PROCESS_PLUGINS
            }),
        ],
        optimization: {
            ...defaultConfig.optimization,
            minimize: true,
            minimizer: [
                new TerserPlugin({
                    // terserOptions: {
                    //     format: {
                    //         // Match any block comment that begin with /*!
                    //         comments: /^\**!|@preserve|@license|@cc_on/i,
                    //     },
                    // },
                    extractComments: false,
                }),
            ],
        }
    }
};